module.exports = {
  'accessor-pairs': 'error',
  // ? This might not be a desirable rule at all.
  'arrow-body-style': ['error', 'as-needed'],
  'block-scoped-var': 'error',
  camelcase: 'off',
  'capitalized-comments': 'off',
  'class-methods-use-this': 'error',
  // ? Should this really be a thing? 10 seems like a reasonable place to start
  complexity: ['error', { max: 10 }],
  'consistent-return': ['error', { treatUndefinedAsUnspecified: true }],
  'consistent-this': ['error', 'that'],
  curly: ['error', 'multi-or-nest', 'consistent'],
  'default-case': 'error',
  'default-case-last': 'error',
  'default-param-last': 'error',
  'dot-notation': 'error',
  eqeqeq: 'error',
  'func-name-matching': 'error',
  'func-names': 'error',
  'func-style': ['error', 'declaration', { allowArrowFunctions: true }],
  'grouped-accessor-pairs': 'error',
  'guard-for-in': 'error',
  'id-denylist': 'off',
  // TODO: try and set these to something and see if it's completely annoying
  'id-length': 'off',
  'id-match': 'off',
  'init-declarations': 'off',
  'max-classes-per-file': 'error',
  'max-depth': ['error', { max: 5 }],
  // TODO: enable this in other project to test it out. React files might be a problem.
  'max-lines': 'off',
  'max-lines-per-function': 'off',
  'max-nested-callbacks': ['error', { max: 3 }],
  'max-params': ['error', { max: 3 }],
  'max-statements': 'off',
  'multiline-comment-style': 'error',
  'new-cap': 'error',
  'no-alert': 'error',
  'no-array-constructor': 'error',
  'no-bitwise': 'error',
  'no-caller': 'error',
  'no-case-declarations': 'error',
  'no-confusing-arrow': 'error',
  // Should be disabled for aws-cdk projects, and projects which won't reach the frontend
  'no-console': 'warn',
  'no-continue': 'error',
  'no-delete-var': 'error',
  'no-div-regex': 'error',
  'no-else-return': 'error',
  'no-empty': 'error',
  'no-empty-function': 'error',
  'no-eq-null': 'error',
  'no-eval': 'error',
  'no-extend-native': 'error',
  'no-extra-bind': 'error',
  'no-extra-boolean-cast': 'error',
  'no-extra-boolean-cast': 'error',
  'no-extra-label': 'error',
  'no-extra-semi': 'error',
  'no-floating-decimal': 'error',
  'no-global-assign': 'error',
  'no-implicit-coercion': 'error',
  'no-implicit-globals': 'off',
  'no-implied-eval': 'error',
  'no-inline-comments': 'off',
  'no-invalid-this': 'error',
  'no-iterator': 'error',
  'no-label-var': 'error',
  'no-labels': 'error',
  'no-lone-blocks': 'error',
  'no-lonely-if': 'error',
  'no-loop-func': 'error',
  // TODO: test if this is at all nice to have
  'no-magic-numbers': 'error',
  'no-mixed-operators': 'error',
  'no-multi-assign': 'error',
  'no-multi-str': 'error',
  'no-negated-condition': 'error',
  // ? I believe i tried this before, and it was a little bit annoying
  'no-nested-ternary': 'error',
  'no-new': 'off',
  'no-new-func': 'error',
  'no-new-object': 'error',
  'no-new-wrappers': 'error',
  'no-nonoctal-decimal-escape': 'error',
  'no-octal': 'error',
  'no-octal-escape': 'error',
  'no-param-reassign': ['error', { props: false }],
  'no-plusplus': 'error',
  'no-proto': 'error',
  'no-redeclare': 'error',
  'no-regex-spaces': 'error',
  'no-restricted-exports': 'off',
  'no-restricted-globals': 'off',
  'no-restricted-imports': 'off',
  'no-restricted-properties': 'off',
  'no-restricted-syntax': 'off',
  // ? Maybe this needs to be overridden in react
  'no-return-assign': 'error',
  'no-return-await': 'error',
  'no-script-url': 'error',
  'no-sequences': 'error',
  'no-shadow': 'error',
  'no-shadow-restricted-names': 'error',
  'no-ternary': 'off',
  'no-throw-literal': 'error',
  'no-undef-init': 'off',
  'no-undefined': 'error',
  'no-underscore-dangle': 'off',
  'no-unneeded-ternary': 'error',
  'no-unused-expressions': [
    'error',
    { allowShortCircuit: true, allowTernary: true, enforceForJSX: true },
  ],
  'no-unused-labels': 'error',
  'no-useless-call': 'error',
  'no-useless-catch': 'error',
  'no-useless-computed-key': 'error',
  'no-useless-concat': 'error',
  'no-useless-constructor': 'error',
  'no-useless-escape': 'error',
  'no-useless-rename': 'error',
  // ? This might dissallow returns as control flow statements
  'no-useless-return': 'error',
  'no-var': 'error',
  'no-void': 'error',
  'no-warning-comments': ['error', { terms: ['fixme'] }],
  'no-with': 'error',
  // TODO: see what this does and feels like
  'object-shorthand': ['error', 'always'],
  // TODO: when writing typescript, this might not be desireable
  'one-var': ['error', { initialized: 'never', uninitialized: 'consecutive' }],
  'one-var-declaration-per-line': ['error', 'initializations'],
  'operator-assignment': ['error', 'always'],
  'prefer-arrow-callback': 'error',
  'prefer-const': 'error',
  // TODO: Might need to turn off for arrays
  'prefer-destructuring': 'error',
  'prefer-exponentiation-operator': 'error',
  // Used in regexp, read more here:
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Ranges#using_groups
  'prefer-named-capture-group': 'error',
  // Don't know why this shouldn't be allowed
  'prefer-numeric-literals': 'off',
  // this shouldn't be used until we only write code in ES2022
  'prefer-object-has-own': 'off',
  'prefer-object-spread': 'error',
  'prefer-promise-reject-errors': 'error',
  'prefer-regex-literals': 'off',
  'prefer-rest-params': 'error',
  'prefer-spread': 'error',
  'prefer-template': 'error',
  'quote-props': ['error', 'as-needed', { unnecessary: true }],
  radix: 'error',
  'require-await': 'off',
  // ? never really heard about this
  'require-unicode-regexp': 'off',
  'require-yield': 'error',
  'sort-imports': 'error',
  'spaced-comment': 'error',
  strict: 'error',
  'symbol-description': 'error',
  'vars-on-top': 'error',
  yoda: 'off',
};
